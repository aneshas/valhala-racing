// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProvisionedServer is an object representing the database table.
type ProvisionedServer struct {
	ID                     int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerID               int       `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	ExpiresAt              time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	TerminationScheduledAt null.Time `boil:"termination_scheduled_at" json:"termination_scheduled_at,omitempty" toml:"termination_scheduled_at" yaml:"termination_scheduled_at,omitempty"`
	TerminatedAt           null.Time `boil:"terminated_at" json:"terminated_at,omitempty" toml:"terminated_at" yaml:"terminated_at,omitempty"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	InstanceID             string    `boil:"instance_id" json:"instance_id" toml:"instance_id" yaml:"instance_id"`

	R *provisionedServerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L provisionedServerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProvisionedServerColumns = struct {
	ID                     string
	ServerID               string
	ExpiresAt              string
	TerminationScheduledAt string
	TerminatedAt           string
	CreatedAt              string
	UpdatedAt              string
	InstanceID             string
}{
	ID:                     "id",
	ServerID:               "server_id",
	ExpiresAt:              "expires_at",
	TerminationScheduledAt: "termination_scheduled_at",
	TerminatedAt:           "terminated_at",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	InstanceID:             "instance_id",
}

var ProvisionedServerTableColumns = struct {
	ID                     string
	ServerID               string
	ExpiresAt              string
	TerminationScheduledAt string
	TerminatedAt           string
	CreatedAt              string
	UpdatedAt              string
	InstanceID             string
}{
	ID:                     "provisioned_server.id",
	ServerID:               "provisioned_server.server_id",
	ExpiresAt:              "provisioned_server.expires_at",
	TerminationScheduledAt: "provisioned_server.termination_scheduled_at",
	TerminatedAt:           "provisioned_server.terminated_at",
	CreatedAt:              "provisioned_server.created_at",
	UpdatedAt:              "provisioned_server.updated_at",
	InstanceID:             "provisioned_server.instance_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ProvisionedServerWhere = struct {
	ID                     whereHelperint64
	ServerID               whereHelperint
	ExpiresAt              whereHelpertime_Time
	TerminationScheduledAt whereHelpernull_Time
	TerminatedAt           whereHelpernull_Time
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
	InstanceID             whereHelperstring
}{
	ID:                     whereHelperint64{field: "\"provisioned_server\".\"id\""},
	ServerID:               whereHelperint{field: "\"provisioned_server\".\"server_id\""},
	ExpiresAt:              whereHelpertime_Time{field: "\"provisioned_server\".\"expires_at\""},
	TerminationScheduledAt: whereHelpernull_Time{field: "\"provisioned_server\".\"termination_scheduled_at\""},
	TerminatedAt:           whereHelpernull_Time{field: "\"provisioned_server\".\"terminated_at\""},
	CreatedAt:              whereHelpertime_Time{field: "\"provisioned_server\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"provisioned_server\".\"updated_at\""},
	InstanceID:             whereHelperstring{field: "\"provisioned_server\".\"instance_id\""},
}

// ProvisionedServerRels is where relationship names are stored.
var ProvisionedServerRels = struct {
}{}

// provisionedServerR is where relationships are stored.
type provisionedServerR struct {
}

// NewStruct creates a new relationship struct
func (*provisionedServerR) NewStruct() *provisionedServerR {
	return &provisionedServerR{}
}

// provisionedServerL is where Load methods for each relationship are stored.
type provisionedServerL struct{}

var (
	provisionedServerAllColumns            = []string{"id", "server_id", "expires_at", "termination_scheduled_at", "terminated_at", "created_at", "updated_at", "instance_id"}
	provisionedServerColumnsWithoutDefault = []string{"server_id", "expires_at"}
	provisionedServerColumnsWithDefault    = []string{"id", "termination_scheduled_at", "terminated_at", "created_at", "updated_at", "instance_id"}
	provisionedServerPrimaryKeyColumns     = []string{"id"}
	provisionedServerGeneratedColumns      = []string{}
)

type (
	// ProvisionedServerSlice is an alias for a slice of pointers to ProvisionedServer.
	// This should almost always be used instead of []ProvisionedServer.
	ProvisionedServerSlice []*ProvisionedServer
	// ProvisionedServerHook is the signature for custom ProvisionedServer hook methods
	ProvisionedServerHook func(context.Context, boil.ContextExecutor, *ProvisionedServer) error

	provisionedServerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	provisionedServerType                 = reflect.TypeOf(&ProvisionedServer{})
	provisionedServerMapping              = queries.MakeStructMapping(provisionedServerType)
	provisionedServerPrimaryKeyMapping, _ = queries.BindMapping(provisionedServerType, provisionedServerMapping, provisionedServerPrimaryKeyColumns)
	provisionedServerInsertCacheMut       sync.RWMutex
	provisionedServerInsertCache          = make(map[string]insertCache)
	provisionedServerUpdateCacheMut       sync.RWMutex
	provisionedServerUpdateCache          = make(map[string]updateCache)
	provisionedServerUpsertCacheMut       sync.RWMutex
	provisionedServerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var provisionedServerAfterSelectMu sync.Mutex
var provisionedServerAfterSelectHooks []ProvisionedServerHook

var provisionedServerBeforeInsertMu sync.Mutex
var provisionedServerBeforeInsertHooks []ProvisionedServerHook
var provisionedServerAfterInsertMu sync.Mutex
var provisionedServerAfterInsertHooks []ProvisionedServerHook

var provisionedServerBeforeUpdateMu sync.Mutex
var provisionedServerBeforeUpdateHooks []ProvisionedServerHook
var provisionedServerAfterUpdateMu sync.Mutex
var provisionedServerAfterUpdateHooks []ProvisionedServerHook

var provisionedServerBeforeDeleteMu sync.Mutex
var provisionedServerBeforeDeleteHooks []ProvisionedServerHook
var provisionedServerAfterDeleteMu sync.Mutex
var provisionedServerAfterDeleteHooks []ProvisionedServerHook

var provisionedServerBeforeUpsertMu sync.Mutex
var provisionedServerBeforeUpsertHooks []ProvisionedServerHook
var provisionedServerAfterUpsertMu sync.Mutex
var provisionedServerAfterUpsertHooks []ProvisionedServerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProvisionedServer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProvisionedServer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProvisionedServer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProvisionedServer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProvisionedServer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProvisionedServer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProvisionedServer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProvisionedServer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProvisionedServer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provisionedServerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProvisionedServerHook registers your hook function for all future operations.
func AddProvisionedServerHook(hookPoint boil.HookPoint, provisionedServerHook ProvisionedServerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		provisionedServerAfterSelectMu.Lock()
		provisionedServerAfterSelectHooks = append(provisionedServerAfterSelectHooks, provisionedServerHook)
		provisionedServerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		provisionedServerBeforeInsertMu.Lock()
		provisionedServerBeforeInsertHooks = append(provisionedServerBeforeInsertHooks, provisionedServerHook)
		provisionedServerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		provisionedServerAfterInsertMu.Lock()
		provisionedServerAfterInsertHooks = append(provisionedServerAfterInsertHooks, provisionedServerHook)
		provisionedServerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		provisionedServerBeforeUpdateMu.Lock()
		provisionedServerBeforeUpdateHooks = append(provisionedServerBeforeUpdateHooks, provisionedServerHook)
		provisionedServerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		provisionedServerAfterUpdateMu.Lock()
		provisionedServerAfterUpdateHooks = append(provisionedServerAfterUpdateHooks, provisionedServerHook)
		provisionedServerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		provisionedServerBeforeDeleteMu.Lock()
		provisionedServerBeforeDeleteHooks = append(provisionedServerBeforeDeleteHooks, provisionedServerHook)
		provisionedServerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		provisionedServerAfterDeleteMu.Lock()
		provisionedServerAfterDeleteHooks = append(provisionedServerAfterDeleteHooks, provisionedServerHook)
		provisionedServerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		provisionedServerBeforeUpsertMu.Lock()
		provisionedServerBeforeUpsertHooks = append(provisionedServerBeforeUpsertHooks, provisionedServerHook)
		provisionedServerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		provisionedServerAfterUpsertMu.Lock()
		provisionedServerAfterUpsertHooks = append(provisionedServerAfterUpsertHooks, provisionedServerHook)
		provisionedServerAfterUpsertMu.Unlock()
	}
}

// One returns a single provisionedServer record from the query.
func (q provisionedServerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProvisionedServer, error) {
	o := &ProvisionedServer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for provisioned_server")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProvisionedServer records from the query.
func (q provisionedServerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProvisionedServerSlice, error) {
	var o []*ProvisionedServer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ProvisionedServer slice")
	}

	if len(provisionedServerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProvisionedServer records in the query.
func (q provisionedServerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count provisioned_server rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q provisionedServerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if provisioned_server exists")
	}

	return count > 0, nil
}

// ProvisionedServers retrieves all the records using an executor.
func ProvisionedServers(mods ...qm.QueryMod) provisionedServerQuery {
	mods = append(mods, qm.From("\"provisioned_server\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"provisioned_server\".*"})
	}

	return provisionedServerQuery{q}
}

// FindProvisionedServer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProvisionedServer(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProvisionedServer, error) {
	provisionedServerObj := &ProvisionedServer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"provisioned_server\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, provisionedServerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from provisioned_server")
	}

	if err = provisionedServerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return provisionedServerObj, err
	}

	return provisionedServerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProvisionedServer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no provisioned_server provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provisionedServerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	provisionedServerInsertCacheMut.RLock()
	cache, cached := provisionedServerInsertCache[key]
	provisionedServerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			provisionedServerAllColumns,
			provisionedServerColumnsWithDefault,
			provisionedServerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(provisionedServerType, provisionedServerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(provisionedServerType, provisionedServerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"provisioned_server\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"provisioned_server\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into provisioned_server")
	}

	if !cached {
		provisionedServerInsertCacheMut.Lock()
		provisionedServerInsertCache[key] = cache
		provisionedServerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProvisionedServer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProvisionedServer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	provisionedServerUpdateCacheMut.RLock()
	cache, cached := provisionedServerUpdateCache[key]
	provisionedServerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			provisionedServerAllColumns,
			provisionedServerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update provisioned_server, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"provisioned_server\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, provisionedServerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(provisionedServerType, provisionedServerMapping, append(wl, provisionedServerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update provisioned_server row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for provisioned_server")
	}

	if !cached {
		provisionedServerUpdateCacheMut.Lock()
		provisionedServerUpdateCache[key] = cache
		provisionedServerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q provisionedServerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for provisioned_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for provisioned_server")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProvisionedServerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provisionedServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"provisioned_server\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, provisionedServerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in provisionedServer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all provisionedServer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProvisionedServer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("boiler: no provisioned_server provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provisionedServerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	provisionedServerUpsertCacheMut.RLock()
	cache, cached := provisionedServerUpsertCache[key]
	provisionedServerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			provisionedServerAllColumns,
			provisionedServerColumnsWithDefault,
			provisionedServerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			provisionedServerAllColumns,
			provisionedServerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert provisioned_server, could not build update column list")
		}

		ret := strmangle.SetComplement(provisionedServerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(provisionedServerPrimaryKeyColumns) == 0 {
				return errors.New("boiler: unable to upsert provisioned_server, could not build conflict column list")
			}

			conflict = make([]string, len(provisionedServerPrimaryKeyColumns))
			copy(conflict, provisionedServerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"provisioned_server\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(provisionedServerType, provisionedServerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(provisionedServerType, provisionedServerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert provisioned_server")
	}

	if !cached {
		provisionedServerUpsertCacheMut.Lock()
		provisionedServerUpsertCache[key] = cache
		provisionedServerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProvisionedServer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProvisionedServer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ProvisionedServer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), provisionedServerPrimaryKeyMapping)
	sql := "DELETE FROM \"provisioned_server\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from provisioned_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for provisioned_server")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q provisionedServerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no provisionedServerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from provisioned_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for provisioned_server")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProvisionedServerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(provisionedServerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provisionedServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"provisioned_server\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provisionedServerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from provisionedServer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for provisioned_server")
	}

	if len(provisionedServerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProvisionedServer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProvisionedServer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProvisionedServerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProvisionedServerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provisionedServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"provisioned_server\".* FROM \"provisioned_server\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provisionedServerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ProvisionedServerSlice")
	}

	*o = slice

	return nil
}

// ProvisionedServerExists checks if the ProvisionedServer row exists.
func ProvisionedServerExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"provisioned_server\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if provisioned_server exists")
	}

	return exists, nil
}

// Exists checks if the ProvisionedServer row exists.
func (o *ProvisionedServer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProvisionedServerExists(ctx, exec, o.ID)
}
